name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # -----------------------------
  # SAST – SonarQube Scan
  # -----------------------------
  sast:
    name: SAST (SonarQube)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=commando-x_vuln-bank
            -Dsonar.organization=commando-x
            -Dsonar.sources=.
            -Dsonar.python.version=3.9

      - name: Store SonarQube Results
        run: |
          mkdir -p security-results/sonarqube
          curl -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" \
               "${{ secrets.SONAR_HOST_URL }}/api/issues/search?projectKeys=vulnerable-bank" \
               > security-results/sonarqube/issues.json

      - name: Upload SonarQube Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sonar-results
          path: security-results/sonarqube/
          retention-days: 90

  # -----------------------------
  # SCA – Dependency Scanning with Snyk
  # -----------------------------
  sca:
    name: Dependency Scanning (Snyk)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Snyk Scan
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --json-file-output=security-results/snyk/scan-results.json

      - name: Upload Snyk Artifact
        uses: actions/upload-artifact@v4
        with:
          name: snyk-results
          path: security-results/snyk/scan-results.json
          retention-days: 90

  # -----------------------------
  # Container Scanning – Trivy
  # -----------------------------
  container_scan:
    name: Container Scanning (Trivy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fix Permissions on Workspace
        run: sudo chown -R $USER:$USER $GITHUB_WORKSPACE

      - name: Build Docker Image
        run: docker build -t vulnerable-bank:latest .

      - name: Create Trivy Results Directory
        run: mkdir -p security-results/trivy

      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vulnerable-bank:latest'
          format: 'json'
          output: 'security-results/trivy/scan-results.json'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 0  # Continue even if vulnerabilities are found

      - name: Upload Trivy Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: security-results/trivy/scan-results.json
          retention-days: 90

  # -----------------------------
  # IaC Scanning – Checkov
  # -----------------------------
  iac_scan:
    name: IaC Scanning (Checkov)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Checkov Results Directory
        run: mkdir -p security-results/checkov

      - name: Run Checkov Scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,github_actions
          output_format: json
          output_file: security-results/checkov/results.json
          soft_fail: true  # Report issues without failing the job

      - name: Upload Checkov Artifact
        uses: actions/upload-artifact@v4
        with:
          name: checkov-results
          path: security-results/checkov/results.json
          retention-days: 90

  # -----------------------------
  # Dynamic Analysis – OWASP ZAP
  # -----------------------------
  zap_scan:
    name: Dynamic Analysis (OWASP ZAP)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start and Verify Flask Application
        run: |
          chmod +x scripts/health_check.sh
          ./scripts/health_check.sh

      - name: Create Results Directory and Set Permissions
        run: |
          mkdir -p security-results/zap
          sudo chown -R 1000:1000 .
          sudo chmod -R 777 security-results/zap

      - name: Run ZAP Scan
        run: |
          docker pull softwaresecurityproject/zap-stable:2.14.0
          
          # Create zap.yaml with correct permissions
          sudo mkdir -p /home/runner/zap
          sudo chown -R 1000:1000 /home/runner/zap
          
          docker run --user 1000:1000 \
            --rm \
            -v $(pwd):/zap/wrk:rw \
            -v /home/runner/zap:/home/zap:rw \
            --network host \
            softwaresecurityproject/zap-stable:2.14.0 \
            zap-baseline.py \
            -t http://localhost:5000 \
            -J security-results/zap/zap-output.json \
            -I

      - name: Cleanup Docker Image
        if: always()
        run: docker rmi softwaresecurityproject/zap-stable:2.14.0

      - name: Upload ZAP Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-results
          path: security-results/zap/
          retention-days: 90

  # -----------------------------
  # Report – Generate HTML Summary Report
  # -----------------------------
  report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [sast, sca, container_scan, iac_scan, zap_scan]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Results Directory
        run: mkdir -p security-results/{sonarqube,snyk,trivy,checkov,zap}

      # Download artifacts with continue-on-error
      - name: Download SonarQube Results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: sonar-results
          path: security-results/sonarqube

      - name: Download Snyk Results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: snyk-results
          path: security-results/snyk

      - name: Download Trivy Results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: trivy-results
          path: security-results/trivy

      - name: Download Checkov Results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: checkov-results
          path: security-results/checkov

      - name: Download ZAP Results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: zap-results
          path: security-results/zap

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Generate Comprehensive Report
        run: |
          cat << 'EOF' > security-results/report.html
          <!DOCTYPE html>
          <html>
          <head>
            <title>Security Scan Results</title>
            <style>
              body { 
                font-family: Arial, sans-serif; 
                margin: 20px;
                line-height: 1.6;
                color: #333;
              }
              .tool-section { 
                margin-bottom: 40px;
                padding: 20px;
                border: 1px solid #ddd;
                border-radius: 5px;
              }
              .severity-critical { color: darkred; font-weight: bold; }
              .severity-high { color: red; }
              .severity-medium { color: orange; }
              .severity-low { color: #999900; }
              .status-failed { color: red; }
              .status-passed { color: green; }
              .status-skipped { color: gray; }
              .vulnerability-item {
                margin: 10px 0;
                padding: 10px;
                background-color: #f9f9f9;
                border-left: 4px solid #ddd;
              }
              .summary-box {
                background-color: #f0f0f0;
                padding: 15px;
                border-radius: 5px;
                margin-bottom: 20px;
              }
              .no-results {
                color: #666;
                font-style: italic;
              }
            </style>
          </head>
          <body>
            <h1>Security Scan Results</h1>
            
            <div class='summary-box'>
              <h2>Executive Summary</h2>
              <p>Scan completed at $(date)</p>
              <p>Repository: $GITHUB_REPOSITORY</p>
              <p>Branch: $GITHUB_REF</p>
              <p>Commit: $GITHUB_SHA</p>
            </div>

            <!-- SAST Results -->
            <div class='tool-section'>
              <h2>Static Application Security Testing (SonarQube)</h2>
              $(if [ -f security-results/sonarqube/issues.json ]; then
                  cat security-results/sonarqube/issues.json | jq -r '.issues[] | "<div class=\"vulnerability-item severity-" + (.severity | ascii_downcase) + "\"><h3>" + .message + "</h3><p>Location: " + .component + "</p><p>Type: " + .type + "</p></div>"' 2>/dev/null || echo "<p class='no-results'>No issues found</p>"
                else
                  echo "<p class='no-results'>Scan was not completed</p>"
                fi)
            </div>

            <!-- SCA Results -->
            <div class='tool-section'>
              <h2>Software Composition Analysis (Snyk)</h2>
              $(if [ -f security-results/snyk/scan-results.json ]; then
                  cat security-results/snyk/scan-results.json | jq -r '.vulnerabilities[]? | "<div class=\"vulnerability-item severity-" + (.severity | ascii_downcase) + "\"><h3>" + .title + "</h3><p>Package: " + .package + "</p><p>Version: " + .version + "</p><p>Fix: " + (.fix.upgradeTo // "No fix available") + "</p></div>"' 2>/dev/null || echo "<p class='no-results'>No vulnerabilities found</p>"
                else
                  echo "<p class='no-results'>Scan was not completed</p>"
                fi)
            </div>

            <!-- Container Scan Results -->
            <div class='tool-section'>
              <h2>Container Security (Trivy)</h2>
              $(if [ -f security-results/trivy/scan-results.json ]; then
                  cat security-results/trivy/scan-results.json | jq -r '.Results[]? | .Vulnerabilities[]? | "<div class=\"vulnerability-item severity-" + (.Severity | ascii_downcase) + "\"><h3>" + .VulnerabilityID + ": " + .Title + "</h3><p>Package: " + .PkgName + "</p><p>Installed Version: " + .InstalledVersion + "</p><p>Fixed Version: " + (.FixedVersion // "No fix available") + "</p></div>"' 2>/dev/null || echo "<p class='no-results'>No vulnerabilities found</p>"
                else
                  echo "<p class='no-results'>Scan was not completed</p>"
                fi)
            </div>

            <!-- IaC Scan Results -->
            <div class='tool-section'>
              <h2>Infrastructure as Code Security (Checkov)</h2>
              $(if [ -f security-results/checkov/results.json ]; then
                  cat security-results/checkov/results.json | jq -r '.results.failed_checks[]? | "<div class=\"vulnerability-item severity-" + (.severity | ascii_downcase) + "\"><h3>" + .check_name + "</h3><p>Resource: " + .resource + "</p><p>File: " + .file_path + "</p><p>Guideline: " + .guideline + "</p></div>"' 2>/dev/null || echo "<p class='no-results'>No issues found</p>"
                else
                  echo "<p class='no-results'>Scan was not completed</p>"
                fi)
            </div>

            <!-- DAST Results -->
            <div class='tool-section'>
              <h2>Dynamic Application Security Testing (ZAP)</h2>
              $(if [ -f security-results/zap/zap-output.json ]; then
                  cat security-results/zap/zap-output.json | jq -r '.site[]?.alerts[]? | "<div class=\"vulnerability-item severity-" + (.risk | ascii_downcase) + "\"><h3>" + .name + "</h3><p>Risk Level: " + .risk + "</p><p>Description: " + .description + "</p><p>Solution: " + .solution + "</p></div>"' 2>/dev/null || echo "<p class='no-results'>No vulnerabilities found</p>"
                else
                  echo "<p class='no-results'>Scan was not completed</p>"
                fi)
            </div>
          </body>
          </html>
          EOF

      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-results/report.html
          retention-days: 90

  # -----------------------------
  # Deploy – Deployment Stage
  # -----------------------------
  deploy:
    name: Deploy to EC2
    needs: [sast, sca, container_scan, iac_scan, zap_scan, report]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2  # Updated to v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Explicitly set region instead of using secret

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          chmod +x deploy/deploy.sh
          ./deploy/deploy.sh