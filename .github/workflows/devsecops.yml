name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # -----------------------------
  # SAST – SonarQube Scan
  # -----------------------------
  sast:
    name: SAST (SonarQube)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=commando-x_vuln-bank
            -Dsonar.organization=commando-x
            -Dsonar.sources=.
            -Dsonar.python.version=3.9

      - name: Save SonarQube Results
        run: |
          mkdir -p security-results/sonarqube
          curl -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" \
               "${{ secrets.SONAR_HOST_URL }}/api/issues/search?projectKeys=vulnerable-bank" \
               > security-results/sonarqube/issues.json

      - name: Upload SonarQube Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sonar-results
          path: security-results/sonarqube/
          retention-days: 90

  # -----------------------------
  # SCA – Dependency Scanning with Snyk
  # -----------------------------
  sca:
    name: Dependency Scanning (Snyk)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Snyk Scan
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --json-file-output=security-results/snyk/scan-results.json

      - name: Upload Snyk Artifact
        uses: actions/upload-artifact@v4
        with:
          name: snyk-results
          path: security-results/snyk/scan-results.json
          retention-days: 90

  # -----------------------------
  # Container Scanning – Trivy
  # -----------------------------
  container_scan:
    name: Container Scanning (Trivy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # (Optional) Fix workspace permissions
      - name: Fix Permissions on Workspace
        run: sudo chown -R $USER:$USER $GITHUB_WORKSPACE

      # Build the Docker image (adjust build context if your Dockerfile is in a subdirectory)
      - name: Build Docker Image
        run: docker build -t vulnerable-bank:latest .

      - name: Create Trivy Results Directory
        run: mkdir -p security-results/trivy

      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vulnerable-bank:latest'
          format: 'json'
          output: 'security-results/trivy/scan-results.json'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 0  # Do not fail even if vulnerabilities are found

      - name: Upload Trivy Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: security-results/trivy/scan-results.json
          retention-days: 90

  # -----------------------------
  # IaC Scanning – Checkov
  # -----------------------------
  iac_scan:
    name: IaC Scanning (Checkov)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Checkov Results Directory
        run: mkdir -p security-results/checkov

      - name: Run Checkov Scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,github_actions
          output_format: json
          output_file: security-results/checkov/results.json
          soft_fail: true  # Report issues without failing the job

      - name: Upload Checkov Artifact
        uses: actions/upload-artifact@v4
        with:
          name: checkov-results
          path: security-results/checkov/results.json
          retention-days: 90

  # -----------------------------
  # Dynamic Analysis – OWASP ZAP
  # -----------------------------
  zap_scan:
    name: Dynamic Analysis (OWASP ZAP)
    runs-on: ubuntu-latest
    continue-on-error: true  # Allows the workflow to continue even if ZAP fails
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create ZAP Results Directory
        run: mkdir -p security-results/zap

      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable'
          target: 'http://localhost:5000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-J security-results/zap/zap-results.json'

      - name: Upload ZAP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-results
